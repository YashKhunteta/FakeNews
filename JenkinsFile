// pipeline {
//     agent any

//     environment {
//         DOCKER_IMAGE = 'flask-app'  
//     }

//     stages {
//         stage('Clone Repository') {
//             steps {
//                 echo 'Cloning the repository...'
//                 git branch: 'main', url: 'https://github.com/YashKhunteta/FakeNews'
//             }
//         }

//         stage('Build Docker Image') {
//             steps {
//                 echo 'Building Docker image...'
//                 script {
//                     bat 'docker build -t $DOCKER_IMAGE .'
//                 }
//             }
//         }

//         stage('Run Container') {
//             steps {
//                 echo 'Running container for testing...'
//                 script {
//                     bat 'docker run -d -p 5000:5000 --name $CONTAINER_NAME $DOCKER_IMAGE'
//                 }
//             }
//         }


        
//     }

//     post {
//         always {
//             echo 'Pipeline execution completed.'
//         }
//         success {
//             echo 'Pipeline executed successfully.'
//         }
//         failure {
//             echo 'Pipeline failed.'
//         }
//     }
// }

pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'flask-app'
        CONTAINER_PORT = '5000'
        HOST_PORT = '5000'
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                git branch: 'main', url: 'https://github.com/YashKhunteta/FakeNews.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    // Build the Docker image
                    bat 'docker build -t %DOCKER_IMAGE_NAME% .'
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Running Docker container...'
                    // Stop and remove any existing container using the same image
                    bat 'docker ps -q --filter ancestor=%DOCKER_IMAGE_NAME% | for /f %i in ("delims=") do docker stop %i && docker rm %i'
                    // Run the new Docker container
                    bat 'docker run -d -p %HOST_PORT%:%CONTAINER_PORT% %DOCKER_IMAGE_NAME%'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }

    }
}
